;; Name: Ambrose Kuo, Student ID:20626217
;; CS 135 FALL 2015, Assignment 06
;; Q3
(define startcountat 0)
(define M1 (list(list 1 2 3)(list 4 5 6)(list 7 8 9)))
(define M2 (list (list)))
(define M3 (list(list 7 8 9) (list)))
(define M4 (list(list -1)(list 9)(list 1)))
(define M5(list(list 8 7 6)(list 5 4 3)(list 2 1 0)))
(define M6(list(list -1 -2 -3)(list -4 -5 -6)(list -7 -8 -9)))
(define M7 (list (list 1) (list 2)))
(define M8 (list (list 4 4 4) (list 3 3 3) (list 1 0 1)))
(define M9 (list (list 9) (list 9)))

;;(a)
;;(matrix-row-count matrix row# i) consumes a matrix and a row number, and a
;;  counter i that starts at 0. The function produces that row in the matrix.
;;    The first row starts at row number 0.
;;matrix-row: (listof (listof Num)) Nat Nat-> (listof Num)
;;See wrapper function for examples and tests.

(define (matrix-row-count matrix row# i)
  (cond
    [(empty? matrix) empty]
    [(= row# i) (first matrix)]
    [else (matrix-row-count (rest matrix) row# (add1 i))]))

;;(matrix-row matrix row#) consumes a matrix and a row number and produces that
;;  row in the matrix. The first row starts at row number 0.
;;matrix-row: (listof (listof Num)) Nat-> (listof Num)
;;requires: matrix is non-empty
;;          row number < (length Matrix)
;;Examples:
(check-expect (matrix-row M1 0)(list 1 2 3))
(check-expect (matrix-row M2 0)(list))

(define (matrix-row matrix row#)
  (matrix-row-count matrix row# startcountat))

;;Tests:
(check-expect (matrix-row M3 1)(list))
(check-expect (matrix-row M4 2)(list 1))

;;(b)
;;(find-col-of-one-row matrix col#) consumes a list of a row in a matrix,
;;   a column number, and a counter, n that starts at 0. It produces a
;;     number on the row that is on the column position. The first column starts
;;       at column number 0.
;;find-col-of-one-row: (listof Num) Nat Nat-> Nat
;;Examples:
(check-expect (find-col-of-one-row (first M1) 0 0) 1)
(check-expect (find-col-of-one-row (first M1) 2 0) 3)

(define (find-col-of-one-row row-of-matrix col# n)
  (cond
    [(empty? row-of-matrix) empty]
    [(= col# n) (first row-of-matrix)]
    [else (find-col-of-one-row (rest row-of-matrix) col# (add1 n))]))

;;Tests:
(check-expect (find-col-of-one-row (first (rest M1)) 2 0) 6)
(check-expect (find-col-of-one-row (first (rest (rest M1))) 1 0) 8)

;;(matrix-column-count matrix col# i) consumes a matrix and a column number,
;;   and a counter i that starts at 0. The function produces the column
;;     corresponding to that column number in the matrix. The first column
;;       starts at row number 0.
;;matrix-column: (listof (listof Num)) Nat Nat-> (listof Num)
;;See wrapper function for examples and tests.

(define (matrix-col-count matrix col# i)
  (cond
    [(empty? matrix) empty]
    [(empty? (first matrix)) (matrix-col-count (rest matrix) col# i)]
    [else (cons (find-col-of-one-row (matrix-row matrix i) col# startcountat)
                (matrix-col-count (rest matrix) col# i))]))

;;(matrix-column-count matrix col# i) consumes a matrix and a column number.
;;    The function produces the column corresponding to that column number
;;       in the matrix. The first column starts at row number 0.
;;matrix-column: (listof (listof Num)) Nat-> (listof Num)
;;requires: matrix is not empty
;;          column number < (length Matrix)
;;Examples:
(check-expect (matrix-col M1 1) (list 2 5 8))
(check-expect (matrix-col M1 0) (list 1 4 7))

(define (matrix-col matrix col#)
  (matrix-col-count matrix col# startcountat))

;;Tests:
(check-expect (matrix-col M2 0) (list))
(check-expect (matrix-col M3 0) (list 7))
(check-expect (matrix-col M4 0) (list -1 9 1))

;;(c)
;;(get-element matrix row# col#) consumes a matrix, a row number, and a column
;;  number. The function produces the element at that row and column position.
;;get-element: (listof (listof Num)) Nat Nat -> Num
;;requires: matrix cannot be of an empty list
;;          row < (length Matrix)
;;          column < (length Matrix)
;;Examples:
(check-expect (get-element M1 0 0) 1)
(check-expect (get-element M1 2 1) 8)

(define (get-element matrix row# col#)
  (find-col-of-one-row (matrix-row matrix row#) col# startcountat))

;;Tests:
(check-expect (get-element M3 0 2) 9)
(check-expect (get-element M4 1 0) 9)
(check-expect (get-element M4 2 0) 1)

;;(d)
;;(matrix-add-row matrix1 matrix2 n i) consumes two matrices with exact
;;  dimensions, a counter for row number, n, and a counter for the column
;;    number i. The function produces a list of numbers that contains the
;;      result of adding the elements with the same positions in both matrices.
;;matrix-add-row: (listof (listof Num)) (listof (listof Num)) Nat Nat ->
;;                                                          (listof Num)
;;requires: row# matrix1 = row# matrix2
;;          column# matrix1 = column# matrix2
;;Examples:
(check-expect (matrix-add-row M1 M1 0 0) (list 2 4 6))
(check-expect (matrix-add-row M1 M1 1 0) (list 8 10 12))

(define (matrix-add-row matrix1 matrix2 n i)
  (cond
    [(empty? (matrix-row matrix1 i)) empty]
    [else (cons (+ (get-element matrix1 n i)
                   (get-element matrix2 n i))
                (matrix-add-row matrix1 matrix2 n (add1 i)))]))

;;Tests:
(check-expect (matrix-add-row M1 M1 1 1) (list 10 12))
(check-expect (matrix-add-row M1 M1 2 0) (list 14 16 18))


;;(matrix-add-column matrix1 matrix2 n i) consumes two matrices with identical
;;  dimensions, a row counter n, and a column counter i. The function
;;   creates a new matrix that contains the result of adding the elements
;;     with the same positions in both matrices.
;;matrix-add-column: (listof (listof Num)) (listof (listof Num)) Nat Nat ->
;;                                                          (listof (listof Num)
;;requires: row# matrix1 = row# matrix2
;;          column# matrix1 = column# matrix2
;;See wrapper functions for examples and tests.

(define (matrix-add-column matrix1 matrix2 n i)
  (cond
    [(empty? (matrix-row matrix1 n)) empty]
    [else (cons (matrix-add-row matrix1 matrix2 n startcountat)
                (matrix-add-column matrix1 matrix2 (add1 n) i))]))

;;(matrix-add matrix1 matrix2) consumes two matrices with identical dimensions
;;   and creates a new matrix that contains the result of adding the elements
;;     with the same positions in both matrices.
;;matrix-add:(listof (listof Num)) (listof (listof Num)) ->
;;                                                    (listof (listof Num))
;;requires: row# matrix1 = row# matrix2
;;          column# matrix1 = column# matrix2
;;Examples:
(check-expect (matrix-add M1 M1) (list(list 2 4 6)(list 8 10 12)
                                      (list 14 16 18)))
(check-expect (matrix-add M1 M5) (list(list 9 9 9)(list 9 9 9)
                                      (list 9 9 9)))

(define (matrix-add matrix1 matrix2)
  (matrix-add-column matrix1 matrix2 startcountat startcountat))

;;Tests:
(check-expect (matrix-add M1 M6)(list (list 0 0 0)(list 0 0 0)
                                      (list 0 0 0)))
(check-expect (matrix-add M5 M6)(list(list 7 5 3)(list 1 -1 -3)
                                     (list -5 -7 -9)))
(check-expect (matrix-add (list (list 0 0) (list 2 2))
                          (list (list 2 2) (list 0 0)))
              (list (list 2 2) (list 2 2)))

;;(e)
;;(matrix-multiply-row-col matrix1 matrix2 m n p) consumes two matrices, and
;;  the row number for matrix1 m, the column number for matrix1/row number
;;    for matrix2 n, and the column number for matrix2 p.
;;matrix-multiply-row-col: (listof (listof Num)) (listof (listof Num)) Nat Nat
;;                            Nat -> Num 
;;See wrapper function for Examples and Tests

(define (matrix-multiply-row-col matrix1 matrix2 m n p)
  (cond [(empty? (matrix-row (matrix-col matrix1 n) m)) 0]
        [else (+ (*(matrix-row (matrix-col matrix1 n) m)
                   (matrix-row (matrix-col matrix2 p) n))
                 (matrix-multiply-row-col matrix1 matrix2 m (add1 n) p))]))

;;(matrix-create-row matrix1 matrix2 m n p) consumes two matrices, and
;;  the row number for matrix1 m, the column number for matrix1/row number
;;    for matrix2 n, and the column number for matrix2 p.
;;matrix-create-row: (listof (listof Num)) (listof (listof Num)) Nat Nat
;;                            Nat -> (listof Num) 
;;See wrapper function for Examples and Tests

(define (matrix-create-row matrix1 matrix2 m n p)
  (cond
    [(empty? (matrix-row (matrix-col matrix2 p) n)) empty]
    [else (cons (matrix-multiply-row-col matrix1 matrix2
                                         m n  p)
                (matrix-create-row matrix1 matrix2
                                   m n (add1 p)))]))

;;(matrix-create-list matrix1 matrix2 m n p) consumes two matrices, and
;;  the row number for matrix1 m, the column number for matrix1/row number
;;    for matrix2 n, and the column number for matrix2 p.
;;matrix-create-list: (listof (listof Num)) (listof (listof Num)) Nat Nat
;;                            Nat -> (listof (listof Num))
;;See wrapper function for Examples and Tests

(define (matrix-create-list matrix1 matrix2 m n p)
  (cond
    [(empty? (matrix-row matrix1 m)) empty]
    [else (cons (matrix-create-row matrix1 matrix2
                                   m n p)
                (matrix-create-list matrix1 matrix2
                                    (add1 m) n p))]))


;;(matrix-multiply matrix1 matrix2) consumes two matrices and produces the
;;   result of multiplying them.
;;matrix-multiply: (listof (listo Num)) (listof(listof Num)) ->
;;                                             (listof(listof Num))
;;requires: Either the number of rows or the number of columns of matrix 1
;;            has to be equal to either the number of rows or the number of
;;              columns of matrix 2.
;;Examples:
(check-expect (matrix-multiply M7 M7) (list (list 1) (list 2)))
(check-expect (matrix-multiply M1 M5)
              (list (list 24 18 12) (list 69 54 39)(list 114 90 66)))


(define (matrix-multiply matrix1 matrix2)
  (matrix-create-list matrix1 matrix2 startcountat startcountat startcountat))

;;Tests:
(check-expect (matrix-multiply M7 M9) (list (list 9) (list 18)))
(check-expect (matrix-multiply M1 M8)
              (list (list 13 10 13) (list 37 31 37)(list 61 52 61)))




